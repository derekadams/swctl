# Source: sitewhere-infrastructure/charts/nifi/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sitewhere-infrastructure-nifi
  namespace: sitewhere-system
  labels:
    app: "nifi"
spec:
  podManagementPolicy: Parallel
  serviceName: sitewhere-infrastructure-nifi-headless
  replicas: 1
  selector:
    matchLabels:
      app: nifi
      release: sitewhere-infrastructure
  template:
    metadata:
      annotations:
        security.alpha.kubernetes.io/sysctls: net.ipv4.ip_local_port_range=10000 65000
      labels:
        app: "nifi"
        chart: "nifi-0.3.2"
        release: "sitewhere-infrastructure"
        heritage: "Tiller"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: "component"
                      operator: In
                      values:
                        - "nifi"
                topologyKey: "kubernetes.io/hostname"
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      initContainers:
        - name: zookeeper
          image: busybox
          command:
            - sh
            - -c
            - |
              echo trying to contact sitewhere-infrastructure-zookeeper 2181
              until nc -vzw 1 sitewhere-infrastructure-zookeeper 2181; do
                echo "waiting for zookeeper..."
                sleep 2
              done
      containers:
        - name: server
          imagePullPolicy: "IfNotPresent"
          image: "sitewhere/sitewhere-nifi:3.0.0"
          command:
            - bash
            - -ce
            - |
              prop_replace () {
                target_file=${NIFI_HOME}/conf/${3:-nifi.properties}
                echo "updating ${1} in ${target_file}"
                if egrep "^${1}=" ${target_file} &> /dev/null; then
                  sed -i -e "s|^$1=.*$|$1=$2|"  ${target_file}
                else
                  echo ${1}=${2} >> ${target_file}
                fi
              }

              FQDN=$(hostname -f)

              cat "${NIFI_HOME}/conf/nifi.temp" > "${NIFI_HOME}/conf/nifi.properties"

              if [[ $(grep $(hostname) conf/authorizers.temp) ]]; then
                cat "${NIFI_HOME}/conf/authorizers.temp" > "${NIFI_HOME}/conf/authorizers.xml"
              else
                cat "${NIFI_HOME}/conf/authorizers.empty" > "${NIFI_HOME}/conf/authorizers.xml"
              fi

              prop_replace nifi.remote.input.host ${FQDN}
              prop_replace nifi.cluster.node.address ${FQDN}
              prop_replace nifi.web.http.host ${FQDN}
              prop_replace nifi.zookeeper.connect.string ${NIFI_ZOOKEEPER_CONNECT_STRING}

              exec bin/nifi.sh run
          resources: {}

          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 6007
              name: cluster
              protocol: TCP
          env:
            - name: NIFI_ZOOKEEPER_CONNECT_STRING
              value: sitewhere-infrastructure-zookeeper:2181
          lifecycle:
            preStop:
              exec:
                command:
                  - bash
                  - -c
                  - |
                    $NIFI_HOME/bin/nifi.sh stop
          readinessProbe:
            initialDelaySeconds: 60
            periodSeconds: 20
            exec:
              command:
                - bash
                - -c
                - |
                  curl -kv \
                    http://$(hostname -f):8080/nifi-api/controller/cluster > $NIFI_BASE_DIR/data/cluster.state
                  STATUS=$(jq -r ".cluster.nodes[] | select((.address==\"$(hostname -f)\") or .address==\"localhost\") | .status" $NIFI_BASE_DIR/data/cluster.state)

                  if [[ ! $STATUS = "CONNECTED" ]]; then
                    echo "Node not found with CONNECTED state. Full cluster state:"
                    jq . $NIFI_BASE_DIR/data/cluster.state
                    exit 1
                  fi
          livenessProbe:
            initialDelaySeconds: 90
            periodSeconds: 60
            tcpSocket:
              port: 8080
          volumeMounts:
            - name: "data"
              mountPath: /opt/nifi/data
            - name: "flowfile-repository"
              mountPath: /opt/nifi/flowfile_repository
            - name: "content-repository"
              mountPath: /opt/nifi/content_repository
            - name: "provenance-repository"
              mountPath: /opt/nifi/provenance_repository
            - name: "logs"
              mountPath: /opt/nifi/nifi-current/logs
            - name: "bootstrap-conf"
              mountPath: /opt/nifi/nifi-current/conf/bootstrap.conf
              subPath: "bootstrap.conf"
            - name: "nifi-properties"
              mountPath: /opt/nifi/nifi-current/conf/nifi.temp
              subPath: "nifi.temp"
            - name: "authorizers-temp"
              mountPath: /opt/nifi/nifi-current/conf/authorizers.temp
              subPath: "authorizers.temp"
            - name: "authorizers-empty"
              mountPath: /opt/nifi/nifi-current/conf/authorizers.empty
              subPath: "authorizers.empty"
            - name: "bootstrap-notification-services-xml"
              mountPath: /opt/nifi/nifi-current/conf/bootstrap-notification-services.xml
              subPath: "bootstrap-notification-services.xml"
            - name: "logback-xml"
              mountPath: /opt/nifi/nifi-current/conf/logback.xml
              subPath: "logback.xml"
            - name: "login-identity-providers-xml"
              mountPath: /opt/nifi/nifi-current/conf/login-identity-providers.xml
              subPath: "login-identity-providers.xml"
            - name: "state-management-xml"
              mountPath: /opt/nifi/nifi-current/conf/state-management.xml
              subPath: "state-management.xml"
            - name: "zookeeper-properties"
              mountPath: /opt/nifi/nifi-current/conf/zookeeper.properties
              subPath: "zookeeper.properties"
        - name: app-log
          image: ez123/alpine-tini
          args: [tail, -n+1, -F, /var/log/nifi-app.log]
          resources:
            limits:
              cpu: 50m
              memory: 50Mi
            requests:
              cpu: 10m
              memory: 10Mi

          volumeMounts:
            - name: logs
              mountPath: /var/log
        - name: bootstrap-log
          image: ez123/alpine-tini
          args: [tail, -n+1, -F, /var/log/nifi-bootstrap.log]
          resources:
            limits:
              cpu: 50m
              memory: 50Mi
            requests:
              cpu: 10m
              memory: 10Mi

          volumeMounts:
            - name: logs
              mountPath: /var/log
        - name: user-log
          image: ez123/alpine-tini
          args: [tail, -n+1, -F, /var/log/nifi-user.log]
          resources:
            limits:
              cpu: 50m
              memory: 50Mi
            requests:
              cpu: 10m
              memory: 10Mi

          volumeMounts:
            - name: logs
              mountPath: /var/log
      volumes:
        - name: "bootstrap-conf"
          configMap:
            name: sitewhere-infrastructure-nifi-config
            items:
              - key: "bootstrap.conf"
                path: "bootstrap.conf"
        - name: "nifi-properties"
          configMap:
            name: sitewhere-infrastructure-nifi-config
            items:
              - key: "nifi.properties"
                path: "nifi.temp"
        - name: "authorizers-temp"
          configMap:
            name: sitewhere-infrastructure-nifi-config
            items:
              - key: "authorizers.xml"
                path: "authorizers.temp"
        - name: "authorizers-empty"
          configMap:
            name: sitewhere-infrastructure-nifi-config
            items:
              - key: "authorizers-empty.xml"
                path: "authorizers.empty"
        - name: "bootstrap-notification-services-xml"
          configMap:
            name: sitewhere-infrastructure-nifi-config
            items:
              - key: "bootstrap-notification-services.xml"
                path: "bootstrap-notification-services.xml"
        - name: "logback-xml"
          configMap:
            name: sitewhere-infrastructure-nifi-config
            items:
              - key: "logback.xml"
                path: "logback.xml"
        - name: "login-identity-providers-xml"
          configMap:
            name: sitewhere-infrastructure-nifi-config
            items:
              - key: "login-identity-providers.xml"
                path: "login-identity-providers.xml"
        - name: "state-management-xml"
          configMap:
            name: sitewhere-infrastructure-nifi-config
            items:
              - key: "state-management.xml"
                path: "state-management.xml"
        - name: "zookeeper-properties"
          configMap:
            name: sitewhere-infrastructure-nifi-config
            items:
              - key: "zookeeper.properties"
                path: "zookeeper.properties"
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        storageClassName: "<nil>"
        resources:
          requests:
            storage: 1Gi
    - metadata:
        name: flowfile-repository
      spec:
        accessModes:
          - "ReadWriteOnce"
        storageClassName: "<nil>"
        resources:
          requests:
            storage: 1Gi
    - metadata:
        name: content-repository
      spec:
        accessModes:
          - "ReadWriteOnce"
        storageClassName: "<nil>"
        resources:
          requests:
            storage: 1Gi
    - metadata:
        name: provenance-repository
      spec:
        accessModes:
          - "ReadWriteOnce"
        storageClassName: "<nil>"
        resources:
          requests:
            storage: 1Gi
    - metadata:
        name: logs
      spec:
        accessModes:
          - "ReadWriteOnce"
        storageClassName: "<nil>"
        resources:
          requests:
            storage: 1Gi
